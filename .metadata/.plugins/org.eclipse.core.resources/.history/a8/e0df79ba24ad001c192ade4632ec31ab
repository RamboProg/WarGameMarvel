package engine;
import engine.Player;
import model.world.Cover;

import java.io.IOException;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;

import model.world.Champion;
import model.abilities.Ability;
import model.abilities.AreaOfEffect;
import model.effects.Effect;
import model.effects.EffectType;

public class Game {

	private Player firstPlayer;
	private Player secondPlayer;
	private boolean firstLeaderAbilityUsed;
	private boolean secondLeaderAbilityUsed;
	private Object[][] board;
	private static ArrayList<Champion> availableChampions;
	private static ArrayList<Ability> availableAbilities;
	private PriorityQueue turnOrder;
	private static int BOARDHEIGHT;
	private static int BOARDWIDTH;

	public Game(Player firstPlayer, Player secondPlayer){
		this.firstPlayer = firstPlayer;
		this.secondPlayer = secondPlayer;
		placeChampions();
		placeCovers();
	}
	
	public Player getFirstP(){
		return this.firstPlayer;
	}
	
	public Player getScndP(){
		return this.secondPlayer;
	}
	
	public boolean getFrstLdrAbility(){
		return this.firstLeaderAbilityUsed;
	}
	
	public boolean getScndLdrAbility(){	
		return this.secondLeaderAbilityUsed;
	}
	
	public Object[][] getBoard(){
		return this.board;
	}
	
	public static ArrayList<Champion> getChampAvailable(){
		return availableChampions;
	}
	
	public static ArrayList<Ability> getAbilityAvailable(){
		return availableAbilities;
	}
	
	public PriorityQueue getTurnOrder(){
		return this.turnOrder;
	}
	
	public static int getBoardHeight(){
		return BOARDHEIGHT;
	}
	
	public static int getBoardWidth(){
		return BOARDWIDTH;
	}
	
	private void placeChampions(){
		//Champions put on the bottom half
		board[0][1] = availableChampions.get(0); 
		board[0][2] = availableChampions.get(1);
		board[0][3] = availableChampions.get(2);
		
		//Champions put on the top half
		board[4][1] = availableChampions.get(0);
		board[4][2] = availableChampions.get(1);
		board[4][3] = availableChampions.get(2);
	}
	
	private void placeCovers(){
		int count = 0;
		for(int i = 5; i > 0; i--){
			for(int j = 0; i < 5; j++){
				if((i != 1 && i != 2 && i != 3) && (j != 1 && j != 2 && j != 3) && count != 5){
					Cover c = new Cover(i, j);
					count++;
				}
			}
		}
	}
	
	public static void loadAbility(String filePath) throws IOException{
		String currentLine = "";
		FileReader fileReader = new FileReader(filePath);
		BufferedReader br = new BufferedReader(fileReader);
		while((currentLine = br.readLine()) != null){
			String[] result = currentLine.split(",");
			Ability ability = null;
		
			String name = result[1];
			int manaCost = Integer.parseInt(result[2]);
			int castRange = Integer.parseInt(result[3]);
			int baseCooldown = Integer.parseInt(result[4]);
			AreaOfEffect areaOfEffect = AreaOfEffect.valueOf(result[5]);
			int requiredActionsPerTurn = Integer.parseInt(result[6]);
			
			if(result[0] == "HEL"){
				int healAmount = Integer.parseInt(result[7]);
				Ability a = new Ability(name, manaCost, baseCooldown, castRange, areaOfEffect,requiredActionsPerTurn);
			}
			else{
				if(result[0] == "DMG"){
					int damageAmount = Integer.parseInt(result[7]);
					Ability a = new Ability(name, manaCost, baseCooldown, castRange, areaOfEffect,requiredActionsPerTurn);
				}
			
				else{
					String effectName = result[7];
					int effectDuration = Integer.parseInt(result[8]);
					
					switch(result[7]){
						case "Disarm":
						case "Silence":
						case "Root":
						case "Shock":
						case "Stun":
							Effect e1 = new Effect(effectName, effectDuration, EffectType.DEBUFF);
							break;
						
						case "PowerUp":
						case "Shield":
						case "SpeedUp":
						case "Embrace":
						case "Dodge":
							Effect e2 = new Effect(effectName, effectDuration, EffectType.BUFF);
							break;
					}
					
				}
			}
			
			
			
		}
		
	}
	

}

		
	

