package engine;

import java.awt.Point;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;

import exceptions.AbilityUseException;
import exceptions.ChampionDisarmedException;
import exceptions.InvalidTargetException;
import exceptions.LeaderAbilityAlreadyUsedException;
import exceptions.LeaderNotCurrentException;
import exceptions.NotEnoughResourcesException;
import exceptions.UnallowedMovementException;
import model.abilities.Ability;
import model.abilities.AreaOfEffect;
import model.abilities.CrowdControlAbility;
import model.abilities.DamagingAbility;
import model.abilities.HealingAbility;
import model.effects.Disarm;
import model.effects.Dodge;
import model.effects.Effect;
import model.effects.EffectType;
import model.effects.Embrace;
import model.effects.PowerUp;
import model.effects.Root;
import model.effects.Shield;
import model.effects.Shock;
import model.effects.Silence;
import model.effects.SpeedUp;
import model.effects.Stun;
import model.world.AntiHero;
import model.world.Champion;
import model.world.Condition;
import model.world.Cover;
import model.world.Damageable;
import model.world.Direction;
import model.world.Hero;
import model.world.Villain;

public class Game {

	private Player firstPlayer;
	private Player secondPlayer;
	private boolean firstLeaderAbilityUsed;
	private boolean secondLeaderAbilityUsed;
	private Object[][] board;
	private static ArrayList<Champion> availableChampions;
	private static ArrayList<Ability> availableAbilities;
	private PriorityQueue turnOrder;
	private final static int BOARDHEIGHT = 5;
	private final static int BOARDWIDTH = 5;

	public Game(Player firstPlayer, Player secondPlayer) {
		this.firstPlayer = firstPlayer;
		this.secondPlayer = secondPlayer;
		board = new Object[BOARDHEIGHT][BOARDWIDTH];
		availableChampions = new ArrayList<Champion>();
		availableAbilities = new ArrayList<Ability>();
		placeChampions();
		placeCovers();
		this.turnOrder = new PriorityQueue(firstPlayer.getTeam().size()
				+ secondPlayer.getTeam().size());
		prepareChampionTurns();

	}

	public Player getFirstPlayer() {
		return firstPlayer;
	}

	public Player getSecondPlayer() {
		return secondPlayer;
	}

	public boolean isFirstLeaderAbilityUsed() {
		return firstLeaderAbilityUsed;
	}

	public boolean isSecondLeaderAbilityUsed() {
		return secondLeaderAbilityUsed;
	}

	public Object[][] getBoard() {
		return board;
	}

	public static ArrayList<Champion> getAvailableChampions() {
		return availableChampions;
	}

	public static ArrayList<Ability> getAvailableAbilities() {
		return availableAbilities;
	}

	public PriorityQueue getTurnOrder() {
		return turnOrder;
	}

	public static int getBoardheight() {
		return BOARDHEIGHT;
	}

	public static int getBoardwidth() {
		return BOARDWIDTH;
	}

	private void placeChampions() {
		for (int i = 0; i < firstPlayer.getTeam().size(); i++) {
			board[0][i + 1] = firstPlayer.getTeam().get(i);
			firstPlayer.getTeam().get(i).setLocation(new Point(0, i + 1));

			board[4][i + 1] = secondPlayer.getTeam().get(i);
			secondPlayer.getTeam().get(i).setLocation(new Point(4, i + 1));
		}

	}

	private void placeCovers() {
		Random rnd = new Random();
		Random rnd1 = new Random();
		int k = 0;
		while (k < 5) {
			int coloumn = rnd.nextInt((3)) + 1;
			int row = rnd1.nextInt((5));
			if (board[coloumn][row] == null) {
				board[coloumn][row] = new Cover(coloumn, row);
				k++;
			}
		}
	}

	public static void loadAbilities(String filePath) throws IOException {
		String currentLine = "";
		FileReader fileReader = new FileReader(filePath);
		BufferedReader br = new BufferedReader(fileReader);
		while ((currentLine = br.readLine()) != null) {
			String[] result = currentLine.split(",");

			String name = result[1];
			int manaCost = Integer.parseInt(result[2]);
			int castRange = Integer.parseInt(result[3]);
			int baseCooldown = Integer.parseInt(result[4]);
			AreaOfEffect areaOfEffect = AreaOfEffect.valueOf(result[5]);
			int requiredActionsPerTurn = Integer.parseInt(result[6]);

			if (result[0].equals("HEL")) {
				int healAmount = Integer.parseInt(result[7]);
				HealingAbility a = new HealingAbility(name, manaCost,
						baseCooldown, castRange, areaOfEffect,
						requiredActionsPerTurn, healAmount);
				availableAbilities.add(a);
			} else {
				if (result[0].equals("DMG")) {
					int damageAmount = Integer.parseInt(result[7]);
					DamagingAbility a = new DamagingAbility(name, manaCost,
							baseCooldown, castRange, areaOfEffect,
							requiredActionsPerTurn, damageAmount);
					availableAbilities.add(a);
				}

				else {
					// String effectName = result[7];
					int effectDuration = Integer.parseInt(result[8]);

					switch (result[7]) {
					case "Disarm":
						Disarm d = new Disarm(effectDuration);
						CrowdControlAbility cc2 = new CrowdControlAbility(name,
								manaCost, baseCooldown, castRange,
								areaOfEffect, requiredActionsPerTurn, d);
						availableAbilities.add(cc2);
						break;
					case "Silence":
						Silence s = new Silence(effectDuration);
						CrowdControlAbility cc3 = new CrowdControlAbility(name,
								manaCost, baseCooldown, castRange,
								areaOfEffect, requiredActionsPerTurn, s);
						availableAbilities.add(cc3);
						break;
					case "Root":
						Root r = new Root(effectDuration);
						CrowdControlAbility cc4 = new CrowdControlAbility(name,
								manaCost, baseCooldown, castRange,
								areaOfEffect, requiredActionsPerTurn, r);
						availableAbilities.add(cc4);
						break;
					case "Shock":
						Shock sh = new Shock(effectDuration);
						CrowdControlAbility cc5 = new CrowdControlAbility(name,
								manaCost, baseCooldown, castRange,
								areaOfEffect, requiredActionsPerTurn, sh);
						availableAbilities.add(cc5);
						break;
					case "Stun":
						Stun st = new Stun(effectDuration);
						CrowdControlAbility cc1 = new CrowdControlAbility(name,
								manaCost, baseCooldown, castRange,
								areaOfEffect, requiredActionsPerTurn, st);
						availableAbilities.add(cc1);
						break;

					case "PowerUp":
						PowerUp p = new PowerUp(effectDuration);
						CrowdControlAbility cc7 = new CrowdControlAbility(name,
								manaCost, baseCooldown, castRange,
								areaOfEffect, requiredActionsPerTurn, p);
						availableAbilities.add(cc7);
						break;
					case "Shield":
						Shield shi = new Shield(effectDuration);
						CrowdControlAbility cc8 = new CrowdControlAbility(name,
								manaCost, baseCooldown, castRange,
								areaOfEffect, requiredActionsPerTurn, shi);
						availableAbilities.add(cc8);
						break;
					case "SpeedUp":
						SpeedUp su = new SpeedUp(effectDuration);
						CrowdControlAbility cc9 = new CrowdControlAbility(name,
								manaCost, baseCooldown, castRange,
								areaOfEffect, requiredActionsPerTurn, su);
						availableAbilities.add(cc9);
						break;
					case "Embrace":
						Embrace e = new Embrace(effectDuration);
						CrowdControlAbility cc10 = new CrowdControlAbility(
								name, manaCost, baseCooldown, castRange,
								areaOfEffect, requiredActionsPerTurn, e);
						availableAbilities.add(cc10);
						break;
					case "Dodge":
						Dodge ddg = new Dodge(effectDuration);
						CrowdControlAbility cc6 = new CrowdControlAbility(name,
								manaCost, baseCooldown, castRange,
								areaOfEffect, requiredActionsPerTurn, ddg);
						availableAbilities.add(cc6);
						break;
					}
				}
			}
		}
	}

	public static void loadChampions(String filePath) throws IOException {
		String currentLine = "";
		FileReader fileReader = new FileReader(filePath);
		BufferedReader br = new BufferedReader(fileReader);
		while ((currentLine = br.readLine()) != null) {
			String[] result = currentLine.split(",");

			String name = result[1];
			int maxHP = Integer.parseInt(result[2]);
			int mana = Integer.parseInt(result[3]);
			int actions = Integer.parseInt(result[4]);
			int speed = Integer.parseInt(result[5]);
			int attackRange = Integer.parseInt(result[6]);
			int attackDamage = Integer.parseInt(result[7]);
			String ability1Name = result[8];
			String ability2Name = result[9];
			String ability3Name = result[10];

			if (result[0].equals("A")) {
				AntiHero a = new AntiHero(name, maxHP, mana, actions, speed,
						attackRange, attackDamage);
				a.getAbilities().add(locateAbility(ability1Name));
				a.getAbilities().add(locateAbility(ability2Name));
				a.getAbilities().add(locateAbility(ability3Name));
				a.setSpeed(speed);
				availableChampions.add(a);
			} else {
				if (result[0].equals("H")) {
					Hero h = new Hero(name, maxHP, mana, actions, speed,
							attackRange, attackDamage);
					h.getAbilities().add(locateAbility(ability1Name));
					h.getAbilities().add(locateAbility(ability2Name));
					h.getAbilities().add(locateAbility(ability3Name));
					h.setSpeed(speed);
					availableChampions.add(h);
				} else {
					Villain v = new Villain(name, maxHP, mana, actions, speed,
							attackRange, attackDamage);
					v.getAbilities().add(locateAbility(ability1Name));
					v.getAbilities().add(locateAbility(ability2Name));
					v.getAbilities().add(locateAbility(ability3Name));
					v.setSpeed(speed);
					availableChampions.add(v);
				}
			}
		}
	}

	private static Ability locateAbility(String abilityName) {
		for (Ability ability : availableAbilities) {
			if (ability.getName().equals(abilityName))
				return ability;
		}
		return null;
	}

	private void prepareChampionTurns() {
		for (Champion c : firstPlayer.getTeam()) {
			if (c.getCondition() != Condition.KNOCKEDOUT)
				turnOrder.insert(c);
		}
		for (Champion c : secondPlayer.getTeam()) {
			if (c.getCondition() != Condition.KNOCKEDOUT)
				turnOrder.insert(c);
		}
	}

	public Champion getCurrentChampion() {
		return (Champion) turnOrder.peekMin();
	}

	public Player checkGameOver() {
		int count1 = 0;
		int count2 = 0;
		for (Champion c : firstPlayer.getTeam()) {
			if (c.getCurrentHP() == 0)
				count1++;
		}
		for (Champion c : secondPlayer.getTeam()) {
			if (c.getCurrentHP() == 0)
				count2++;
		}

		if (count1 == 3 && count2 < 3)
			return secondPlayer;
		else if (count2 == 3 && count1 < 3)
			return firstPlayer;
		else
			return null;

	}

	public void move(Direction d) throws UnallowedMovementException,
			NotEnoughResourcesException {
		if (getCurrentChampion().getCurrentActionPoints() > 0) {

			int x = getCurrentChampion().getLocation().x;
			int y = getCurrentChampion().getLocation().y;
			if ((x < 4 && x > 0) && (y < 4 && y > 0)) {
				switch (d) {
				case UP:
					if (getBoard()[y + 1][x] == null) {
						getCurrentChampion().setLocation(new Point(x, y + 1));
						getCurrentChampion()
								.setCurrentActionPoints(
										getCurrentChampion()
												.getCurrentActionPoints() - 1);
					} else
						throw new UnallowedMovementException(
								"You cannot move here!");
					break;
				case DOWN:
					if (getBoard()[y - 1][x] == null) {
						getCurrentChampion().setLocation(new Point(x, y - 1));
						getCurrentChampion()
								.setCurrentActionPoints(
										getCurrentChampion()
												.getCurrentActionPoints() - 1);
					} else
						throw new UnallowedMovementException(
								"You cannot move here!");
					break;
				case RIGHT:
					if (getBoard()[y][x + 1] == null) {
						getCurrentChampion().setLocation(new Point(x + 1, y));
						getCurrentChampion()
								.setCurrentActionPoints(
										getCurrentChampion()
												.getCurrentActionPoints() - 1);
					} else
						throw new UnallowedMovementException(
								"You cannot move here!");
					break;
				case LEFT:
					if (getBoard()[y][x - 1] == null) {
						getCurrentChampion().setLocation(new Point(x - 1, y));
						getCurrentChampion()
								.setCurrentActionPoints(
										getCurrentChampion()
												.getCurrentActionPoints() - 1);
					} else {
						throw new UnallowedMovementException(
								"You cannot move here!");
					}
					break;

				default:
					throw new UnallowedMovementException("Invalid input");
				}
			} else {
				throw new UnallowedMovementException();
			}
			if (getCurrentChampion().getCondition() == Condition.ROOTED) {
				throw new UnallowedMovementException("Your champion is ROOTED!");
			} else {
				throw new NotEnoughResourcesException(
						"You do not have enough resources!");
			}
		}
	}

	private static int manhattanDist(int X1, int Y1, int X2, int Y2) {
		int dist = Math.abs(X2 - X1) + Math.abs(Y2 - Y1);
		return dist;
	}

	private boolean dodgePresent(Champion c) {
		for (Effect e : c.getAppliedEffects()) {
			if (e instanceof Dodge)
				return true;
		}
		return false;
	}

	private boolean shieldPresent(Champion c) {
		for (Effect e : c.getAppliedEffects()) {
			if (e instanceof Shield)
				return true;
		}
		return false;
	}

	private ArrayList<Damageable> loadValidChamps(int max, Direction d) {
		Champion c = getCurrentChampion();
		Point p = c.getLocation();
		ArrayList<Damageable> targets = new ArrayList<Damageable>();
		for (int i = 0; i < max; i++) {
			switch (d) {
			case UP:
				p.x++;
				if ((p.x < 5 || p.x >= 0 || p.y < 5 || p.y >= 0)
						&& board[p.x][p.y] instanceof Champion
						|| board[p.x][p.y] instanceof Cover)
					targets.add((Damageable) board[p.x][p.y]);
				break;
			case DOWN:
				p.x--;
				if ((p.x < 5 || p.x >= 0 || p.y < 5 || p.y >= 0)
						&& board[p.x][p.y] instanceof Champion
						|| board[p.x][p.y] instanceof Cover)
					targets.add((Damageable) board[p.x][p.y]);
				break;
			case RIGHT:
				p.y++;
				if ((p.x < 5 || p.x >= 0 || p.y < 5 || p.y >= 0)
						&& board[p.x][p.y] instanceof Champion
						|| board[p.x][p.y] instanceof Cover)
					targets.add((Damageable) board[p.x][p.y]);
				break;
			case LEFT:
				p.y--;
				if ((p.x < 5 || p.x >= 0 || p.y < 5 || p.y >= 0)
						&& board[p.x][p.y] instanceof Champion
						|| board[p.x][p.y] instanceof Cover)
					targets.add((Damageable) board[p.x][p.y]);
				break;
			}
		}
		return targets;
	}

	private Damageable closest(Direction d) {
		Champion c = getCurrentChampion();
		Damageable closestTarget = null;
		switch (d) {
		case UP:
			for (int i = 0; i < c.getAttackRange(); i++) {
				if (board[c.getLocation().x + i][c.getLocation().y] != null
						&& c.getLocation().x + i < BOARDHEIGHT) {
					closestTarget = (Damageable) board[c.getLocation().x + i][c
							.getLocation().y];
					break;
				}
			}
		case DOWN:
			for (int i = 0; i < c.getAttackRange(); i++) {
				if (board[c.getLocation().x - i][c.getLocation().y] != null
						&& c.getLocation().x - i >= 0) {
					closestTarget = (Damageable) board[c.getLocation().x - i][c
							.getLocation().y];
					break;
				}
			}
		case LEFT:
			for (int i = 0; i < c.getAttackRange(); i++) {
				if (board[c.getLocation().x][c.getLocation().y - i] != null
						&& c.getLocation().y - i >= 0) {
					closestTarget = (Damageable) board[c.getLocation().x][c
							.getLocation().y - i];
					break;
				}
			}
		case RIGHT:
			for (int i = 0; i < c.getAttackRange(); i++) {
				if (board[c.getLocation().x][c.getLocation().y + i] != null
						&& c.getLocation().y + i < BOARDWIDTH) {
					closestTarget = (Damageable) board[c.getLocation().x][c
							.getLocation().y + i];
					break;
				}
			}
		}
		return closestTarget;

	}

	private boolean isSame(Champion c, Damageable d) {
		if (c instanceof Hero && d instanceof Hero)
			return true;
		else if (c instanceof Villain && d instanceof Villain)
			return true;
		else if (c instanceof AntiHero && d instanceof AntiHero)
			return true;
		else if (c instanceof Champion && d instanceof Cover)
			return true;
		else
			return false;

	}

	public void attack(Direction d) throws ChampionDisarmedException,
			InvalidTargetException, NotEnoughResourcesException {
		Damageable target = null;
		boolean containsDisarm = false;
		Champion c = getCurrentChampion();
		for (Effect e : c.getAppliedEffects()) {
			if (e instanceof Disarm)
				containsDisarm = true;
			break;
		}

		if (containsDisarm)
			throw new ChampionDisarmedException();
		else if (c.getCurrentActionPoints() >= 2) {
			target = closest(d);
			if (target != null) {
				if (isSame(c, target)) {
					if (dodgePresent(c)) {
						int x = (int) (Math.random() * 2);
						if (x == 1) {
							c.setCurrentHP((int) (c.getCurrentHP() - getCurrentChampion()
									.getAttackDamage() * 1.5));
							if (c.getCurrentHP() == 0) {
								c.setCondition(Condition.KNOCKEDOUT);
								oppositeTeam().getTeam().remove(c);
							}
						}
					}
					if (!(shieldPresent(c))) {
						target.setCurrentHP(target.getCurrentHP()
								- c.getAttackDamage());
						if (target instanceof Champion) {
							Champion temp = (Champion) target;
							if (temp.getCurrentHP() == 0) {
								temp.setCondition(Condition.KNOCKEDOUT);
								oppositeTeam().getTeam().remove(temp);
								board[temp.getLocation().x][temp.getLocation().y] = null;
							}
						}
					} else {
						if (target.getCurrentHP() == 0)
							board[target.getLocation().x][target.getLocation().y] = null;
					}
				} else if (!(isSame(c, target))) {
					Champion temp = (Champion) target;
					temp.setCurrentHP(target.getCurrentHP()
							- ((int) (c.getAttackDamage() * 1.5)));
					if (temp.getCurrentHP() == 0) {
						temp.setCondition(Condition.KNOCKEDOUT);
						oppositeTeam().getTeam().remove(temp);
						board[temp.getLocation().x][temp.getLocation().y] = null;
					}
				}
			} else {
				c.setCurrentActionPoints(c.getCurrentActionPoints() - 2);
				throw new InvalidTargetException();
			}
		} else
			throw new NotEnoughResourcesException();
	}

	// Which team has the current champion
	private Player whoContainCurrent() {
		if (firstPlayer.getTeam().contains(getCurrentChampion()))
			return firstPlayer;
		else
			return secondPlayer;
	}

	private Player oppositeTeam() {
		if (firstPlayer.getTeam().contains(getCurrentChampion()))
			return secondPlayer;
		else
			return firstPlayer;
	}

	private ArrayList<Damageable> getInRange(ArrayList<Damageable> targets,
			Ability a) {
		Champion c = getCurrentChampion();
		ArrayList<Damageable> targetStuff = new ArrayList<Damageable>();
		for (int i = 0; i < a.getCastRange(); i++) {
			if (manhattanDist(c.getLocation().x, c.getLocation().y, targets
					.get(i).getLocation().x, targets.get(i).getLocation().y) <= a
					.getCastRange())
				targetStuff.add(targets.get(i));
		}
		return targetStuff;

	}

	public void castAbility(Ability a) throws NotEnoughResourcesException,
			CloneNotSupportedException {
		if (getCurrentChampion().getCurrentActionPoints() >= a
				.getRequiredActionPoints()) {
			if (getCurrentChampion().getMana() >= a.getManaCost()) {
				ArrayList<Damageable> targets = new ArrayList<Damageable>();

				if (a instanceof HealingAbility) {
					if (a.getCastArea() == AreaOfEffect.SELFTARGET) {
						targets.add(getCurrentChampion());
						a.execute(targets);
					}
					if (a.getCastArea() == AreaOfEffect.TEAMTARGET) {
						targets.addAll(whoContainCurrent().getTeam());
						targets = getInRange(targets, a);
					}
					if (a.getCastArea() == AreaOfEffect.SURROUND) {

						// Checks if the top right corner slot is within
						// the team
						int cornerXY_X = getCurrentChampion().getLocation().x + 1;
						int cornerXY_Y = getCurrentChampion().getLocation().y + 1;

						if (board[cornerXY_Y][cornerXY_X] instanceof Champion) {
							if (whoContainCurrent().getTeam().contains(
									board[cornerXY_Y][cornerXY_X])) {
								targets.add((Damageable) board[cornerXY_Y][cornerXY_X]);
							}
						}

						// Checks if the bottom right corner slot is
						// within the team
						int cornerXy_X = getCurrentChampion().getLocation().x + 1;
						int cornerXy_Y = getCurrentChampion().getLocation().y - 1;

						if (board[cornerXY_Y][cornerXY_X] instanceof Champion) {
							if (whoContainCurrent().getTeam().contains(
									board[cornerXy_Y][cornerXy_X])) {
								targets.add((Damageable) board[cornerXy_Y][cornerXy_X]);
							}
						}

						// Checks if the bottom left corner slot is
						// within the team
						int cornerxy_X = getCurrentChampion().getLocation().x - 1;
						int cornerxy_Y = getCurrentChampion().getLocation().y - 1;

						if (board[cornerxy_Y][cornerxy_X] instanceof Champion) {
							if (whoContainCurrent().getTeam().contains(
									board[cornerxy_Y][cornerxy_X])) {
								targets.add((Damageable) board[cornerxy_Y][cornerxy_X]);
							}
						}

						// Checks if the top left corner slot is within
						// the team
						int cornerxY_X = getCurrentChampion().getLocation().x - 1;
						int cornerxY_Y = getCurrentChampion().getLocation().y + 1;

						if (board[cornerxY_Y][cornerxY_X] instanceof Champion) {
							if (whoContainCurrent().getTeam().contains(
									board[cornerxY_Y][cornerxY_X])) {
								targets.add((Damageable) board[cornerxY_Y][cornerxY_X]);
							}
						}
					}
					a.execute(targets);
				}

				else if (a instanceof DamagingAbility) {
					if (a.getCastArea() == AreaOfEffect.TEAMTARGET) {

						targets.addAll(oppositeTeam().getTeam());
						for (int i = 0; i < targets.size(); i++) {
							if ((manhattanDist(targets.get(i).getLocation().x,
									targets.get(i).getLocation().y,
									getCurrentChampion().getLocation().x,
									getCurrentChampion().getLocation().y) > a
									.getCastRange())) {
								targets.remove(targets.get(i));
							}
						}
					}

					// Calculate distance is better (manhattan)
					if (a.getCastArea() == AreaOfEffect.SURROUND) {
						Point currentLoc = getCurrentChampion().getLocation();

						targets.addAll(whoContainCurrent().getTeam());
						for (int i = 0; i < targets.size(); i++) {
							if ((manhattanDist(targets.get(i).getLocation().x,
									targets.get(i).getLocation().y,
									getCurrentChampion().getLocation().x,
									getCurrentChampion().getLocation().y) > 1)) {
								targets.remove(targets.get(i));
							}
						}

						// Checks if the top right corner slot is within
						// the team
						Point cornerXY = getCurrentChampion().getLocation();
						int cornerXY_X = getCurrentChampion().getLocation().x + 1;
						int cornerXY_Y = getCurrentChampion().getLocation().y + 1;

						if (board[cornerXY_Y][cornerXY_X] instanceof Champion) {
							if (oppositeTeam().getTeam().contains(
									board[cornerXY_Y][cornerXY_X])) {
								targets.add((Damageable) board[cornerXY_Y][cornerXY_X]);
							}
						}

						// Checks if the bottom right corner slot is
						// within the team
						Point cornerXy = getCurrentChampion().getLocation();
						int cornerXy_X = getCurrentChampion().getLocation().x + 1;
						int cornerXy_Y = getCurrentChampion().getLocation().y - 1;

						if (board[cornerXY_Y][cornerXY_X] instanceof Champion) {
							if (oppositeTeam().getTeam().contains(
									board[cornerXy_Y][cornerXy_X])) {
								targets.add((Damageable) board[cornerXy_Y][cornerXy_X]);
							}
						}

						// Checks if the bottom left corner slot is
						// within the team
						Point cornerxy = getCurrentChampion().getLocation();
						int cornerxy_X = getCurrentChampion().getLocation().x - 1;
						int cornerxy_Y = getCurrentChampion().getLocation().y - 1;

						if (board[cornerxy_Y][cornerxy_X] instanceof Champion) {
							if (oppositeTeam().getTeam().contains(
									board[cornerxy_Y][cornerxy_X])) {
								targets.add((Damageable) board[cornerxy_Y][cornerxy_X]);
							}
						}

						// Checks if the top left corner slot is within
						// the team
						Point cornerxY = getCurrentChampion().getLocation();
						int cornerxY_X = getCurrentChampion().getLocation().x - 1;
						int cornerxY_Y = getCurrentChampion().getLocation().y + 1;

						if (board[cornerxY_Y][cornerxY_X] instanceof Champion) {
							if (oppositeTeam().getTeam().contains(
									board[cornerxY_Y][cornerxY_X])) {
								targets.add((Damageable) board[cornerxY_Y][cornerxY_X]);
							}
						}
					}
					a.execute(targets);

				} else if (a instanceof CrowdControlAbility) {

					CrowdControlAbility ccA = (CrowdControlAbility) a;
					if (ccA.getEffect().getType() == EffectType.DEBUFF) {
						if (a.getCastArea() == AreaOfEffect.SURROUND) {
							Point currentLoc = getCurrentChampion()
									.getLocation();

							targets.addAll(oppositeTeam().getTeam());
							for (int i = 0; i < targets.size(); i++) {
								if ((manhattanDist(
										targets.get(i).getLocation().x, targets
												.get(i).getLocation().y,
										getCurrentChampion().getLocation().x,
										getCurrentChampion().getLocation().y) > 1)) {
									targets.remove(targets.get(i));
								}
							}

							ArrayList<Champion> targetChamps = new ArrayList<Champion>();
							for (Damageable damageable : targets) {
								if (damageable instanceof Champion)
									targetChamps.add((Champion) damageable);
							}

							for (int i = 0; i < targetChamps.size(); i++) {
								if (targetChamps.get(i).getAppliedEffects()
										.get(i) instanceof Shield) {
									targetChamps.remove(i);
									targetChamps
											.get(i)
											.getAppliedEffects()
											.remove(targetChamps.get(i)
													.getAppliedEffects().get(i));
								}
							}

							// Checks if the top right corner slot is within
							// the team
							Point cornerXY = getCurrentChampion().getLocation();
							int cornerXY_X = getCurrentChampion().getLocation().x + 1;
							int cornerXY_Y = getCurrentChampion().getLocation().y + 1;

							if (board[cornerXY_Y][cornerXY_X] instanceof Champion) {
								if (oppositeTeam().getTeam().contains(
										board[cornerXY_Y][cornerXY_X])) {
									targets.add((Damageable) board[cornerXY_Y][cornerXY_X]);
								}
							}

							// Checks if the bottom right corner slot is
							// within the team
							Point cornerXy = getCurrentChampion().getLocation();
							int cornerXy_X = getCurrentChampion().getLocation().x + 1;
							int cornerXy_Y = getCurrentChampion().getLocation().y - 1;

							if (board[cornerXY_Y][cornerXY_X] instanceof Champion) {
								if (oppositeTeam().getTeam().contains(
										board[cornerXy_Y][cornerXy_X])) {
									targets.add((Damageable) board[cornerXy_Y][cornerXy_X]);
								}
							}

							// Checks if the bottom left corner slot is
							// within the team
							Point cornerxy = getCurrentChampion().getLocation();
							int cornerxy_X = getCurrentChampion().getLocation().x - 1;
							int cornerxy_Y = getCurrentChampion().getLocation().y - 1;

							if (board[cornerxy_Y][cornerxy_X] instanceof Champion) {
								if (oppositeTeam().getTeam().contains(
										board[cornerxy_Y][cornerxy_X])) {
									targets.add((Damageable) board[cornerxy_Y][cornerxy_X]);
								}
							}

							// Checks if the top left corner slot is within
							// the team
							Point cornerxY = getCurrentChampion().getLocation();
							int cornerxY_X = getCurrentChampion().getLocation().x - 1;
							int cornerxY_Y = getCurrentChampion().getLocation().y + 1;

							if (board[cornerxY_Y][cornerxY_X] instanceof Champion) {
								if (oppositeTeam().getTeam().contains(
										board[cornerxY_Y][cornerxY_X])) {
									targets.add((Damageable) board[cornerxY_Y][cornerxY_X]);
								}
							}
						}
					}

					else if (ccA.getEffect().getType() == EffectType.BUFF) {
						if (a.getCastArea() == AreaOfEffect.SURROUND) {
							Point currentLoc = getCurrentChampion()
									.getLocation();

							targets.addAll(whoContainCurrent().getTeam());
							for (Damageable d : targets) {
								if ((manhattanDist(d.getLocation().x,
										d.getLocation().y, getCurrentChampion()
												.getLocation().x,
										getCurrentChampion().getLocation().y) > a
										.getCastRange())) {
									targets.remove(d);
								}
							}

							ArrayList<Champion> targetChamps = new ArrayList<Champion>();
							for (Damageable damageable : targets) {
								if (damageable instanceof Champion)
									targetChamps.add((Champion) damageable);
							}

							// Checks if the top right corner slot is within
							// the team
							Point cornerXY = getCurrentChampion().getLocation();
							int cornerXY_X = getCurrentChampion().getLocation().x + 1;
							int cornerXY_Y = getCurrentChampion().getLocation().y + 1;

							if (board[cornerXY_Y][cornerXY_X] instanceof Champion) {
								if (oppositeTeam().getTeam().contains(
										board[cornerXY_Y][cornerXY_X])) {
									targets.add((Damageable) board[cornerXY_Y][cornerXY_X]);
								}
							}

							// Checks if the bottom right corner slot is
							// within the team
							Point cornerXy = getCurrentChampion().getLocation();
							int cornerXy_X = getCurrentChampion().getLocation().x + 1;
							int cornerXy_Y = getCurrentChampion().getLocation().y - 1;

							if (board[cornerXY_Y][cornerXY_X] instanceof Champion) {
								if (oppositeTeam().getTeam().contains(
										board[cornerXy_Y][cornerXy_X])) {
									targets.add((Damageable) board[cornerXy_Y][cornerXy_X]);
								}
							}

							// Checks if the bottom left corner slot is
							// within the team
							Point cornerxy = getCurrentChampion().getLocation();
							int cornerxy_X = getCurrentChampion().getLocation().x - 1;
							int cornerxy_Y = getCurrentChampion().getLocation().y - 1;

							if (board[cornerxy_Y][cornerxy_X] instanceof Champion) {
								if (oppositeTeam().getTeam().contains(
										board[cornerxy_Y][cornerxy_X])) {
									targets.add((Damageable) board[cornerxy_Y][cornerxy_X]);
								}
							}

							// Checks if the top left corner slot is within
							// the team
							Point cornerxY = getCurrentChampion().getLocation();
							int cornerxY_X = getCurrentChampion().getLocation().x - 1;
							int cornerxY_Y = getCurrentChampion().getLocation().y + 1;

							if (board[cornerxY_Y][cornerxY_X] instanceof Champion) {
								if (oppositeTeam().getTeam().contains(
										board[cornerxY_Y][cornerxY_X])) {
									targets.add((Damageable) board[cornerxY_Y][cornerxY_X]);
								}
							}
						}

					}
					a.execute(targets);
				}
			} else
				throw new NotEnoughResourcesException();
		} else
			throw new NotEnoughResourcesException();

	}

	public void castAbility(Ability a, Direction d)
			throws NotEnoughResourcesException, AbilityUseException,
			CloneNotSupportedException {
		ArrayList<Damageable> targets = new ArrayList<Damageable>();
		for (int i = 0; i < a.getCastRange(); i++) {
			for (int j = 0; j < a.getCastRange(); j++) {
				if (board[j][i] != null && board[j][i] != getCurrentChampion()) {
					targets.add((Damageable) board[j][i]);
				}
			}
		}
		if (a.getCastArea() == AreaOfEffect.DIRECTIONAL
				&& getCurrentChampion().getMana() >= a.getManaCost()
				&& getCurrentChampion().getCurrentActionPoints() >= a
						.getRequiredActionPoints()) {
			switch (d) {
			case UP:
				a.execute(loadValidChamps(a.getCastRange(), d));
				break;
			case DOWN:
				a.execute(loadValidChamps(a.getCastRange(), d));
				break;
			case RIGHT:
				a.execute(loadValidChamps(a.getCastRange(), d));
				break;
			case LEFT:
				a.execute(loadValidChamps(a.getCastRange(), d));
				break;
			default:
				throw new AbilityUseException();
			}
		} else
			throw new NotEnoughResourcesException();
	}

	public void castAbility(Ability a, int x, int y)
			throws AbilityUseException, NotEnoughResourcesException,
			CloneNotSupportedException {
		ArrayList<Damageable> targets = new ArrayList<Damageable>();
		for (int i = 0; i < a.getCastRange(); i++) {
			for (int j = 0; j < a.getCastRange(); j++) {
				if (board[j][i] != null && board[j][i] != getCurrentChampion()) {
					targets.add((Damageable) board[j][i]);
				}
			}
		}
		if (a.getCastArea() == AreaOfEffect.SINGLETARGET) {
			int dist = 0;
			dist = manhattanDist(x, y, getCurrentChampion().getLocation().x,
					getCurrentChampion().getLocation().y);
			if (dist < a.getCastRange()) {
				if (getCurrentChampion().getMana() >= a.getManaCost())
					a.execute(targets);
				else
					throw new NotEnoughResourcesException();
			} else
				throw new AbilityUseException();
		}

	}

	public void useLeaderAbility() throws LeaderNotCurrentException,
			LeaderAbilityAlreadyUsedException {
		if (firstPlayer.getLeader() == getCurrentChampion()) {
			if (firstLeaderAbilityUsed)
				throw new LeaderAbilityAlreadyUsedException();
			ArrayList<Champion> targetChamp = new ArrayList<Champion>();
			if (getCurrentChampion() instanceof Hero) {
				targetChamp.addAll(firstPlayer.getTeam());
				getCurrentChampion().useLeaderAbility(targetChamp);
			} else if (getCurrentChampion() instanceof Villain) {
				for (Champion champion : secondPlayer.getTeam()) {
					if (champion.getCurrentHP() <= (int) (0.3 * champion
							.getMaxHP()))
						targetChamp.add(champion);
					getCurrentChampion().useLeaderAbility(targetChamp);
				}
			} else if (getCurrentChampion() instanceof AntiHero) {
				targetChamp.addAll(firstPlayer.getTeam());
				targetChamp.addAll(secondPlayer.getTeam());
				targetChamp.remove(firstPlayer.getLeader());
				targetChamp.remove(secondPlayer.getLeader());
				getCurrentChampion().useLeaderAbility(targetChamp);
			}
			getCurrentChampion().useLeaderAbility(targetChamp);
			firstLeaderAbilityUsed = true;
		} else if (secondPlayer.getLeader().equals(getCurrentChampion())) {
			if (secondLeaderAbilityUsed)
				throw new LeaderAbilityAlreadyUsedException();
			ArrayList<Champion> targetChamp = new ArrayList<Champion>();
			if (getCurrentChampion() instanceof Hero) {
				targetChamp.addAll(secondPlayer.getTeam());
				getCurrentChampion().useLeaderAbility(targetChamp);
			} else if (getCurrentChampion() instanceof Villain) {
				for (Champion champion : firstPlayer.getTeam()) {
					if (champion.getCurrentHP() <= (int) (0.3 * champion
							.getMaxHP()))
						targetChamp.add(champion);
					getCurrentChampion().useLeaderAbility(targetChamp);
				}
			} else if (getCurrentChampion() instanceof AntiHero) {
				targetChamp.addAll(firstPlayer.getTeam());
				targetChamp.addAll(secondPlayer.getTeam());
				targetChamp.remove(firstPlayer.getLeader());
				targetChamp.remove(secondPlayer.getLeader());
				getCurrentChampion().useLeaderAbility(targetChamp);
			}
			getCurrentChampion().useLeaderAbility(targetChamp);
			secondLeaderAbilityUsed = true;

		} else
			throw new LeaderNotCurrentException();
	}

	// Method is called when the current champion decides to end his turn
	public void endTurn() {
		// removes the current Champion form the turnOrder Queue
		turnOrder.remove();

		if (turnOrder.isEmpty())
			prepareChampionTurns();
		Champion c = getCurrentChampion();
		if (c.getAppliedEffects().size() > 0) {
			for (int l = 0; l < c.getAppliedEffects().size(); l++) {
				c.getAppliedEffects()
						.get(l)
						.setDuration(
								c.getAppliedEffects().get(l).getDuration() - 1);
				if (c.getAppliedEffects().get(l).getDuration() == 0) {
					c.getAppliedEffects().get(l).remove(c);
					c.getAppliedEffects().remove(l);
					l--;
				}

			}
		}
		for (Ability ability : c.getAbilities()) {
			if (ability.getCurrentCooldown() > 0)
				ability.setCurrentCooldown(ability.getCurrentCooldown() - 1);
		}
		c.setCurrentActionPoints(c.getMaxActionPointsPerTurn());
		if (c.getCondition() == Condition.INACTIVE)
			endTurn();
	}
}
